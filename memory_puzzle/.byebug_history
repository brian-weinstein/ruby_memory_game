quit
n
display @board
display previousGuess
s
display position
quit
n
display position
display previousGuess
quit
n
s
n
s
display previousGuess
display position
quit
s
n
s
n
s
display @grid
n
display rand2
display rand 1
n
s
n
display values
quit
    end
        @grid[x][y] = value
        x,y = position
    def [](position,value)
    end
        @grid[x][y]
        x,y = position
    def [](position)
    end
        end
            end
                end
                    values.delete(card)
                if values[card] >= 2
                values[card] += 1
                @grid[rand1][rand2] = Card.new(card)
                card = values.keys.sample
            if @grid[rand1][rand2] != nil
            rand2 = rand(0...@size)
            rand1 = rand(0...@size)
        while values.length > 0 do
        values = getRandomCards
        debugger
    def populate
    end
        values
        randomCards.each {|v| values[v] = 0}
        randomCards = ALPHABET.sample(@size)
        values = Hash.new(0)
    def getRandomCards
    end
        @grid = Array.new(4){Array.new(4)}
        @size = 4
    def initialize
class Board
ALPHABET = *("A".."Z")
require "byebug"
require_relative "card"
display
